import telebot
import config
import PIL
from PIL import Image, ImageDraw
import random
from telebot import types
from pyowm.owm import OWM
from pyowm.utils.config import get_default_config
from time import sleep
import datetime

bot = telebot.TeleBot(config.token)
flag_command = 0
flag_image = 0
markup_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup_exit = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup_image = types.ReplyKeyboardMarkup(resize_keyboard=True)
button_main_1 = types.KeyboardButton('üßÆ–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
button_main_2 = types.KeyboardButton('üé≤—Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä')
button_main_3 = types.KeyboardButton('üêò—Å–ª–æ–Ω')
button_main_4 = types.KeyboardButton('‚òÅ–ø–æ–≥–æ–¥–∞')
button_main_5 = types.KeyboardButton('ü§î–≤–æ–ø—Ä–æ—Å')
button_main_6 = types.KeyboardButton('—Ñ–æ—Ç–æ—à–æ–ø?')

button_image_1 = types.KeyboardButton('–Ω–µ–≥–∞—Ç–∏–≤')
button_image_2 = types.KeyboardButton('–ß–ë')

button_exit = types.KeyboardButton('‚ùå–∑–∞–∫—Ä—ã—Ç—å')

markup_image.add(button_image_1, button_image_2, button_exit)

markup_main.add(button_main_1, button_main_2, button_main_3, button_main_4, button_main_5, button_main_6, row_width=3)
markup_exit.add(button_exit)


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(message.chat.id, f'''{message.from_user.username}, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥:
"{button_main_1.text}"
"{button_main_2.text}"
"{button_main_3.text}"
"{button_main_4.text}"
"{button_main_5.text}"
"{button_main_6.text}"''', reply_markup=markup_main)


@bot.message_handler(content_types=["text", "sticker", "pinned_message", "photo", "audio"])
def chat(message):
    global flag_command
    if message.text == button_exit.text:
        flag_command = 0
        send_welcome(message)
    if flag_command == 0:
        if message.text == button_main_1.text:
            flag_command = 1
            bot.send_message(message.chat.id, f'''–≤–≤–µ–¥–∏—Ç–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ, –∑–Ω–∞–∫ –¥–µ–π—Å—Ç–≤–∏—è, –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ.
–ø—Ä–∏–º–µ—Ä: 1+3; 1-7; 8/2; 2*3
–∑–Ω–∞–∫–∏: "+", "-", "/", "*"
—á—Ç–æ–± –∑–∞–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –Ω–∞–ø–∏—à–∏—Ç–µ "{button_exit.text}"''', reply_markup=markup_exit)
        elif message.text == button_main_2.text:
            flag_command = 2
            bot.send_message(message.chat.id, f'''–≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –º–µ–∂–¥—É –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—Ç –¥–∏–∞–ø–æ–∑–æ–Ω.
—á—Ç–æ–± –∑–∞–∫—Ä—ã—Ç—å —Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä, –Ω–∞–ø–∏—à–∏—Ç–µ "{button_exit.text}"''', reply_markup=markup_exit)
        elif message.text == button_main_3.text:
            flag_command = 3
            bot.send_message(message.chat.id, f'—á—Ç–æ–± –∑–∞–∫—Ä—ã—Ç—å –∏–≥—Ä—É "—Å–ª–æ–Ω", –Ω–∞–ø–∏—à–∏—Ç–µ "{button_exit.text}"',
                             reply_markup=markup_exit)
        elif message.text == button_main_4.text:
            flag_command = 4
            bot.send_message(message.chat.id,
                             f'–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–ø–∏—à–∏—Ç–µ "{button_exit.text}"',
                             reply_markup=markup_exit)
        elif message.text == button_main_5.text:
            flag_command = 5
            bot.send_message(message.chat.id,
                             f'–∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç. —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–ø–∏—à–∏—Ç–µ "{button_exit.text}"',
                             reply_markup=markup_exit)
        elif message.text == button_main_6.text:
            flag_command = 6
            bot.send_message(message.chat.id,
                             f'–≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏. —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–ø–∏—à–∏—Ç–µ "{button_exit.text}"',
                             reply_markup=markup_image)
        elif message.text != button_exit.text:
            bot.reply_to(message, '—É –º–µ–Ω—è –Ω–µ—Ç —Ç–∞–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π :(')
    elif flag_command == 1:
        calculator(message)
    elif flag_command == 2:
        randomize(message)
    elif flag_command == 3:
        elephant(message)
    elif flag_command == 4:
        weather(message)
    elif flag_command == 5:
        questions(message)
    elif flag_command == 6:
        image_re(message)


def image_re(message):
    global flag_image
    if flag_image:
        if message.content_type == 'photo':
            raw = message.photo[2].file_id
            name = 'data/' + message.from_user.username + '__' + str(datetime.datetime.now().timestamp()) + '.jpg'
            file_info = bot.get_file(raw)
            downloaded_file = bot.download_file(file_info.file_path)
            with open(name, 'wb') as new_file:
                new_file.write(downloaded_file)
            image = Image.open(name)
            draw = ImageDraw.Draw(image)
            width = image.size[0]
            height = image.size[1]
            pix = image.load()
            if flag_image == 1:
                for x in range(width):
                    for y in range(height):
                        r = pix[x, y][0]
                        g = pix[x, y][1]
                        b = pix[x, y][2]
                        draw.point((x, y), (255 - r, 255 - g, 255 - b))
                image.save(name)
            if flag_image == 2:
                for x in range(width):
                    for y in range(height):
                        r = pix[x, y][0]
                        g = pix[x, y][1]
                        b = pix[x, y][2]
                        sr = (r + g + b) // 3
                        draw.point((x, y), (sr, sr, sr))
                image.save(name)
            img = open(name, 'rb')
            bot.send_photo(message.chat.id, img)
            flag_image = 0
            bot.send_message(message.chat.id,
                             f'–≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏. —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–ø–∏—à–∏—Ç–µ "{button_exit.text}"',
                             reply_markup=markup_image)

        else:
            bot.send_message(message.chat.id,
                             f'–≤—ã –≤–≤–µ–ª–∏ –Ω–µ —Ñ–æ—Ç–æ. —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–ø–∏—à–∏—Ç–µ "{button_exit.text}"')
    else:
        if message.text == button_image_1.text:
            flag_image = 1
            bot.send_message(message.chat.id, f'–≤–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ç–æ. —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–ø–∏—à–∏—Ç–µ "{button_exit.text}"')
        elif message.text == button_image_2.text:
            flag_image = 2
            bot.send_message(message.chat.id, f'–≤–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ç–æ. —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –Ω–∞–ø–∏—à–∏—Ç–µ "{button_exit.text}"')


def questions(message):
    if random.randint(0, 1):
        bot.reply_to(message, f'–¥–∞')
    else:
        bot.reply_to(message, f'–Ω–µ—Ç')


def elephant(message):
    bot.reply_to(message, f'–≤—Å–µ –≥–æ–≤–æ—Ä—è—Ç "{message.text}", –∞ —Ç—ã –∫—É–ø–∏ —Å–ª–æ–Ω–∞')


def calculator(message):
    flag_calc = 0
    sign = '+'
    line = message.text
    index = 1
    signs = ['+', '-', '*', '/']
    if message.text == '1000 - 7' or message.text == '1000-7':
        img = open("data/ken.jpeg", 'rb')
        bot.send_photo(message.chat.id, img, caption='–Ø —É–º–µ—Ä, –ø—Ä–æ—Å—Ç–∏.')
    else:
        for i in line:
            if i in signs:
                flag_calc += 1
                sign = i
                index = line.index(i)

        if flag_calc == 1 and line[0:index].isdigit() and line[-1:index:-1].isdigit():
            int1 = int(line[0:index])
            int2 = int(line[index + 1:-1] + line[-1])
            if sign == '+':
                bot.reply_to(message, f'{int1 + int2}')
            elif sign == '-':
                bot.reply_to(message, f'{int1 - int2}')
            elif sign == '/':
                if int2 == 0:
                    bot.reply_to(message, '–Ω–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è, –Ω–µ—É—á!')
                else:
                    if int1 / int2 != int(int1 / int2):
                        bot.reply_to(message, f'{int1 / int2}')
                    elif int1 / int2 == int(int1 / int2):
                        bot.reply_to(message, f'{int(int1 / int2)}')
            elif sign == '*':
                bot.reply_to(message, f'{int1 * int2}')
        else:
            bot.reply_to(message, '—Ç—ã –≤–≤—ë–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∫–µ–∫')


def randomize(message):
    text = message.text.split()
    if len(text) == 2:
        if text[0].isdigit() and text[1].isdigit():
            int1 = int(text[0])
            int2 = int(text[1])
            if int2 < int1:
                bot.reply_to(message, '–ø–æ—á–µ–º—É –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –ø–µ—Ä–≤–æ–≥–æ?')
            else:
                bot.reply_to(message, str(random.randint(int1, int2)))
        else:
            bot.reply_to(message, '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')
    else:
        bot.reply_to(message, '–ø–æ—á–µ–º—É —É —Ç–µ–±—è –Ω–µ –¥–≤–∞ —á–∏—Å–ª–∞...')


def weather(message):
    config_dict = get_default_config()
    config_dict['language'] = 'ru'
    owm = OWM(config.api_owm, config_dict)
    mgr = owm.weather_manager()
    try:
        observation = mgr.weather_at_place(message.text)
        degree = observation.weather.temperature('celsius')['temp']
        w = observation.weather.detailed_status
        bot.reply_to(message, f'''—Å–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ {message.text} {w}, {str(round(degree))} ¬∞C''')
    except:
        bot.reply_to(message, '–º—ã –Ω–µ –Ω–∞—à–ª–∏ –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞ :(')


while True:
    try: bot.polling(none_stop=True)
    except Exception as _ex: sleep(15)
